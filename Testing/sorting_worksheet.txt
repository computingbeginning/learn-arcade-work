1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]

temp = my_list[6]
my_list[6] = my_list[7]
my_list[7] = temp


2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]

temp = my_list[3]
my_list[3] = my_list[0]
my_list[0] = temp


3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

The reason this code doesn't work is that it is swapping the values in the wrong order.
The temporary placement was already the value for the first number in the list.
We change the second value without storing it, effectively losing it in place of the second value.
We will get 70 in the first and second placement, and 32 will disappear.


4. Show how the following numbers can be sorted using the selection sort.
Show the numbers after each iteration of the outer loop, similar to what is shown in the book.
I am NOT looking for a copy of the code to do the sort. If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60

97   74    8   98   47   62   12   11    0   60 (Beginning)
0   74    8   98   47   62   12   11    97   60
0   8    74   98   47   62   12   11    97   60
0   8    11   98   47   62   12   74    97   60
0   8    11   12   47   62   98   74    97   60
0   8    11   12   47   62   98   74    97   60 (No change, 47 is already in the correct spot)
0   8    11   12   47   60   98   74    97   62
0   8    11   12   47   60   62   74    97   98 (The placements do not change from here on, but it still runs to the end.)
0   8    11   12   47   60   62   74    97   98
0   8    11   12   47   60   62   74    97   98 (end)


5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25

74   92   18   47   40   58    0   36   29   25
0   92   18   47   40   58    74   36   29   25
0   18   92   47   40   58    74   36   29   25
0   18   25   47   40   58    74   36   29   92
0   18   25   29   40   58    74   36   47   92
0   18   25   29   36   58    74   40   47   92
0   18   25   29   36   40    74   58   47   92
0   18   25   29   36   40    47   58   74   92 (The program continues to run, but everything is sorted from here on.)
0   18   25   29   36   40    47   58   74   92
0   18   25   29   36   40    47   58   74   92


6. Show how the following numbers can be sorted using the INSERTION sort.
(Note: If you think the 0 gets immediately sorted into position, you are doing it wrong.
Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25

74   92   18   47   40   58    0   36   29   25 (start)
18   74   92   47   40   58    0   36   29   25
18   47   74   92   40   58    0   36   29   25
18   40   47   74   92   58    0   36   29   25
18   40   47   58   74   92    0   36   29   25
0   18   40   47   58   74   92   36   29   25
0   18   36   40   47   58   74   92   29   25
0   18   29   36   40   47   58   74   92   25
0   18   25   29   36   40   47   58   74   92 (end)


7. Show how the following numbers can be sorted using the insertion sort:

37   11   14   50   24    7   17   88   99    9

37   11   14   50   24    7   17   88   99    9 (start)
11   37   14   50   24    7   17   88   99    9
11   14   37   50   24    7   17   88   99    9
11   14   24   37   50    7   17   88   99    9
7   11   14   24   37   50   17   88   99    9
7   11   14   17   24   37   50   88   99    9
7    9   11   14   17   24   37   50   88   99 (end)


8. Explain what `min_pos` does in the selection sort.

min_pos is the minimum position in the list when performing the sort.
In most cases, this will start at the beginning of the list, at position 0, and
works from left to right.


9. Explain what `cur_pos` does in the selection sort.

cur_pos is the current position in the list at a given time during selection sort.
This is the placement that is currently being held as the position that may be changed.


10. Explain what `scan_pos` does in the selection sort.

scan_pos is used to check the values in a list.
This value is always at least one position greater than the current position.
This is what is used to increment the check during the sort.
If the value in the scan position is higher than the current position, then the two values will be swapped.


11. Explain what `key_pos` and `key_value` are in the insertion sort.

key value is the value of a selected number within a list, and key_pos is that value's position within the list.

12. Explain `scan_pos` in the insertion sort.

Scan position allows for the sort to operate. It takes the current position of the search in the list,
and check it with the value to the left.
Scan position checks to see if this key value is lower than the value to the left, and if it is, it moves it to the left.

13. Look at the example sort program at the very end of this chapter:

https://learn.arcade.academy/en/latest/chapters/30_sorting/sorting.html


Modify the sorts to print the number of times the inside loop is run, and the number of times the outside loop is run.
Modify the program to work with a list of 100. Paste the code you used here.
Run the program and list the numbers you got here. (DON'T FORGET TO INCLUDE THE RESULTS!)
Inside loop for selection sort should be about 5,000, and insertion sort 2,500.
Double-check if you don't get numbers close to these.


import random


def selection_sort(my_list):
    """ Sort a list using the selection sort """

    selection_sort_outside_list = 0
    selection_sort_inside_list = 0

    # Loop through the entire array
    for cur_pos in range(len(my_list)):
        # Find the position that has the smallest number
        # Start with the current position
        min_pos = cur_pos

        selection_sort_outside_list += 1

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):
            selection_sort_inside_list += 1

            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:
                # It is, mark this position as the smallest
                min_pos = scan_pos

        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp

    print("Outside list ran", selection_sort_outside_list, "times.")
    print("Inside list ran", selection_sort_inside_list, "times.")


def insertion_sort(my_list):
    """ Sort a list using the insertion sort """

    insertion_sort_outside_list = 0
    insertion_sort_inside_list = 0

    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    for key_pos in range(1, len(my_list)):

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1

        insertion_sort_outside_list += 1

        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1

            insertion_sort_inside_list += 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value

    print("Outside list ran", insertion_sort_outside_list, "times.")
    print("Inside list ran", insertion_sort_inside_list, "times.")


# This will point out a list
# For more information on the print formatting {:3}
# see the chapter on print formatting.
def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    # Create two lists of the same random numbers
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 100
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

    # Print the original list
    print("Original List")
    print_list(list_for_selection_sort)

    # Use the selection sort and print the result
    print("Selection Sort")
    selection_sort(list_for_selection_sort)
    print_list(list_for_selection_sort)

    # Use the insertion sort and print the result
    print("Insertion Sort")
    insertion_sort(list_for_insertion_sort)
    print_list(list_for_insertion_sort)


main()


To turn in: Upload your .txt file. Just drag it from PyCharm to the upload for the assignment.
(BUT WAIT! Make sure you include the results from #13, and not just the program.)
Alternatively, turn in a link to the GitHub for the worksheet.


  ((Go back later to double-check the definition of terms for both selection and insertion sorts.))

Results for # 13:

Original List
 43 58 38  0 77 35 70 84 35  9 58 53 79 38  9 49 22 95 88 79 88 47 64  5 90 58 19 95 76 34  2 29 54 89 57 62 26 60 55 42 36 25 38 78 72 71 95 73 80 75 13 77 43 15 71 76 63 76 14 51 79 43 94 64 96 49 84 37 65 75  9 44 62 98 79 58 47 77 40 46 10 44 92 79 31 24 29 77 32 62  2 82  8 28 10 18 37 50 10 79
Selection Sort
Outside list ran 100 times.
Inside list ran 4950 times.
  0  2  2  5  8  9  9  9 10 10 10 13 14 15 18 19 22 24 25 26 28 29 29 31 32 34 35 35 36 37 37 38 38 38 40 42 43 43 43 44 44 46 47 47 49 49 50 51 53 54 55 57 58 58 58 58 60 62 62 62 63 64 64 65 70 71 71 72 73 75 75 76 76 76 77 77 77 77 78 79 79 79 79 79 79 80 82 84 84 88 88 89 90 92 94 95 95 95 96 98
Insertion Sort
Outside list ran 99 times.
Inside list ran 2546 times.
  0  2  2  5  8  9  9  9 10 10 10 13 14 15 18 19 22 24 25 26 28 29 29 31 32 34 35 35 36 37 37 38 38 38 40 42 43 43 43 44 44 46 47 47 49 49 50 51 53 54 55 57 58 58 58 58 60 62 62 62 63 64 64 65 70 71 71 72 73 75 75 76 76 76 77 77 77 77 78 79 79 79 79 79 79 80 82 84 84 88 88 89 90 92 94 95 95 95 96 98
